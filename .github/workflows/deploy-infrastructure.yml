name: Deploy Infrastructure

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_VAR_environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.7.0" # Specify your desired version
          terraform_wrapper: false

      - name: Test IAM Permissions
        run: |
          chmod +x ./devops/scripts/test_aws_permit.sh
          ./devops/scripts/test_aws_permit.sh

      - name: Setup Infrastructure Prerequisites
        run: |
          chmod +x ./devops/scripts/infra-manager.sh        
          ./devops/scripts/infra-manager.sh verify

      - name: Deploy State Resources
        working-directory: devops/terraform/00_state
        run: |
          # Clean any existing state
          rm -rf .terraform*

          # Initialize with local state
          terraform init

          # Create state resources
          terraform plan -out=tfplan
          terraform apply tfplan

          # Wait for S3 bucket to be fully available
          echo "Waiting for S3 bucket to be available..."
          sleep 10

          # Restore backend configuration
          cat > backend.tf << 'EOF'
          terraform {
            required_version = ">= 1.0.0"
            backend "s3" {
              bucket         = "vanillatstodo-terraform-state"
              key            = "staging/terraform.tfstate"
              region         = "us-east-2"
              encrypt        = true
              dynamodb_table = "vanillatstodo-terraform-state-lock"
            }
          }
          EOF

          # Migrate state to S3
          terraform init -migrate-state -force-copy

      - name: Deploy Network Layer
        id: network
        if: success()
        working-directory: ./devops/terraform/01_network
        run: |
          set -e
          echo "Deploying network infrastructure..."
          terraform fmt -check -diff
          terraform init \
            -backend-config="bucket=vanillatstodo-terraform-state" \
            -backend-config="key=staging/network.tfstate" \
            -backend-config="region=us-east-2"
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan || {
            echo "Network deployment failed"
            exit 1
          }

      - name: Deploy EKS Cluster
        id: eks
        if: success()
        working-directory: ./devops/terraform/02_eks
        timeout-minutes: 30
        run: |
          set -e
          echo "Deploying EKS cluster..."
          terraform fmt -check -diff
          terraform init \
            -backend-config="bucket=vanillatstodo-terraform-state" \
            -backend-config="key=staging/eks.tfstate" \
            -backend-config="region=us-east-2"
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan || {
            echo "EKS deployment failed"
            terraform destroy -auto-approve
            exit 1
          }

      - name: Deploy Monitoring
        working-directory: ./devops/terraform/03_monitoring
        run: |
          terraform fmt -check -diff
          terraform init \
            -backend-config="bucket=vanillatstodo-terraform-state" \
            -backend-config="key=staging/monitoring.tfstate" \
            -backend-config="region=us-east-2"
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Verify EKS Deployment
        if: success()
        working-directory: ./devops/terraform/02-eks
        run: |
          CLUSTER_STATUS=$(aws eks describe-cluster --name vanillatstodo-cluster --query 'cluster.status' --output text)
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "Cluster is not active. Status: $CLUSTER_STATUS"
            exit 1
          fi

      - name: Capture Outputs
        if: success()
        working-directory: ./devops/terraform/02_eks
        run: |
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV

      - name: Notify on Completion
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `Infrastructure deployment ${context.job.status}
            Environment: ${process.env.TF_WORKSPACE}
            EKS Cluster: ${process.env.EKS_CLUSTER_NAME}
            VPC: ${process.env.VPC_ID}
            Timestamp: ${new Date().toISOString()}`;

            console.log(message);

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

      - name: Deployment Summary
        if: always()
        run: |
          echo "Deployment Status:"
          echo "State Layer: ${{ steps.state.outcome }}"
          echo "Network Layer: ${{ steps.network.outcome }}"
          echo "EKS Layer: ${{ steps.eks.outcome }}"
