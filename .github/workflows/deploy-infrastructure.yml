name: Deploy Infrastructure

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  AWS_REGION: "us-east-2"
  CLUSTER_NAME: "vanillatstodo-cluster"
  BUCKET_NAME: "vanillatstodo-terraform-state"
  PROJECT_NAME: "vanillatstodo"
  TF_VERSION: "1.10.0"
  TF_VAR_environment: "staging"
  CLUSTER_VERSION: "1.31"
  TF_VAR_kubernetes_version: "1.31"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_VAR_environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Region
        run: |
          # Get current region from AWS CLI configuration or environment
          CURRENT_REGION=${AWS_DEFAULT_REGION:-$(aws configure get region)}
          if [ "$CURRENT_REGION" != "${{ env.AWS_REGION }}" ]; then
            echo "❌ Wrong region configured: $CURRENT_REGION. Must be ${{ env.AWS_REGION }}"
            exit 1
          fi
          echo "✅ Region validated: ${{ env.AWS_REGION }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Test IAM Permissions
        run: |
          chmod +x ./devops/scripts/test_aws_permit.sh
          ./devops/scripts/test_aws_permit.sh

      - name: Setup Infrastructure Prerequisites
        run: |
          chmod +x ./devops/scripts/infra-manager.sh        
          ./devops/scripts/infra-manager.sh verify

      - name: Deploy State Resources
        working-directory: devops/terraform/00_state
        run: |
          rm -rf .terraform*
          terraform init

          if ! aws s3 ls "s3://${PROJECT_NAME}-terraform-state" 2>/dev/null; then
            echo "🏗️ Creating state bucket..."
            terraform apply -auto-approve
            echo "STATE_STATUS=✅" >> $GITHUB_ENV
          else
            echo "✅ State bucket exists"
            echo "STATE_STATUS=✅" >> $GITHUB_ENV
          fi

      - name: Deploy Network Layer
        working-directory: devops/terraform/01_network
        run: |
          echo "🔧 Deploying network layer..."

          # Initialize backend
          terraform init \
            -backend-config="bucket=${PROJECT_NAME}-terraform-state" \
            -backend-config="key=staging/network.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="encrypt=true"

          # Plan and apply
          terraform plan -out=tfplan
          terraform apply tfplan

          # Get state location
          STATE_FILE=$(terraform workspace show)
          if [ -f ".terraform/terraform.tfstate" ]; then
            STATE_PATH=".terraform/terraform.tfstate"
          elif [ -f "terraform.tfstate" ]; then
            STATE_PATH="terraform.tfstate"
          else
            echo "❌ Cannot find state file"
            exit 1
          fi

          # Upload state to S3
          echo "📤 Uploading state to S3..."
          aws s3 cp "${STATE_PATH}" "s3://${PROJECT_NAME}-terraform-state/staging/network.tfstate"

          if [ $? -eq 0 ]; then
            echo "✅ State uploaded successfully"
            
            # Verify state file in S3
            if aws s3 ls "s3://${PROJECT_NAME}-terraform-state/staging/network.tfstate"; then
              echo "✅ State file verified in S3"
            else
              echo "❌ State file not found in S3 after upload"
              exit 1
            fi
          else
            echo "❌ Failed to upload state"
            exit 1
          fi

      - name: Deploy EKS Layer
        working-directory: devops/terraform/02_eks
        run: |
          echo "🔧 Initializing EKS deployment..."

          # Wait for network state to be available
          sleep 10

          # Initialize with explicit backend config
          terraform init \
            -backend-config="bucket=${PROJECT_NAME}-terraform-state" \
            -backend-config="key=staging/eks.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="encrypt=true"

          # Deploy EKS infrastructure
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Deploy Monitoring
        working-directory: ./devops/terraform/03_monitoring
        run: |
          terraform fmt -check -diff
          terraform init \
            -backend-config="bucket=vanillatstodo-terraform-state" \
            -backend-config="key=staging/monitoring.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
          terraform validate
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: Verify EKS Deployment
        if: success()
        working-directory: ./devops/terraform/02_eks
        run: |
          CLUSTER_INFO=$(aws eks describe-cluster --name vanillatstodo-cluster --region ${{ env.AWS_REGION }})
          CLUSTER_STATUS=$(echo "$CLUSTER_INFO" | jq -r '.cluster.status')
          CLUSTER_VERSION=$(echo "$CLUSTER_INFO" | jq -r '.cluster.version')

          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "❌ Cluster is not active. Status: $CLUSTER_STATUS"
            exit 1
          fi

          if [ "$CLUSTER_VERSION" != "1.31" ]; then
            echo "❌ Wrong cluster version: $CLUSTER_VERSION. Expected: 1.31"
            exit 1
          fi

          echo "✅ EKS Cluster validated:"
          echo "- Status: $CLUSTER_STATUS"
          echo "- Version: $CLUSTER_VERSION"
          echo "- Region: ${{ env.AWS_REGION }}"

      - name: Set Deployment Status
        if: always()
        run: |
          check_resource() {
            local cmd="$1"
            local status_var="$2"
            if eval "$cmd" > /dev/null 2>&1; then
              echo "$status_var=✅" >> $GITHUB_ENV
              return 0
            else
              echo "$status_var=❌" >> $GITHUB_ENV
              echo "⚠️ Resource check failed: $cmd"
            fi
          }

          # State Layer Check
          if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} 2>/dev/null; then
            echo "STATE_STATUS=✅" >> $GITHUB_ENV
          else
            echo "STATE_STATUS=❌" >> $GITHUB_ENV
          fi

          # Network Layer Check
          check_resource "aws ec2 describe-vpcs --filters Name=tag:Name,Values=*${{ env.PROJECT_NAME }}*" "NETWORK_STATUS"

          # EKS Layer Check
          check_resource "aws eks describe-cluster --name ${{ env.CLUSTER_NAME }}" "EKS_STATUS"

          # Monitoring Check
          check_resource "aws cloudwatch describe-alarms --alarm-names ${{ env.PROJECT_NAME }}-cluster-health" "MONITORING_STATUS" || true

      - name: Summarize Deployment Status
        if: always()
        run: |
          echo "### Infrastructure Deployment Summary 🏗️" >> $GITHUB_STEP_SUMMARY
          echo "| Layer | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
          echo "| State Layer | ${STATE_STATUS:-❌} | S3 State Management |" >> $GITHUB_STEP_SUMMARY
          echo "| Network Layer | ${NETWORK_STATUS:-❌} | VPC Infrastructure |" >> $GITHUB_STEP_SUMMARY
          echo "| EKS Cluster | ${EKS_STATUS:-❌} | Version: ${TF_VERSION} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitoring | ${MONITORING_STATUS:-❌} | CloudWatch |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform: \`${TF_VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Region: \`${AWS_REGION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: \`${TF_VAR_environment}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${PROJECT_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
          echo "| ----- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
