name: Deploy Infrastructure

on:
  push:
    branches:
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_VAR_environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.7.0" # Specify your desired version
          terraform_wrapper: false

      - name: Test IAM Permissions
        run: |
          chmod +x ./devops/scripts/test_aws_permit.sh
          ./devops/scripts/test_aws_permit.sh

      - name: Setup Infrastructure Prerequisites
        run: |
          chmod +x ./devops/scripts/infra-manager.sh        
          ./devops/scripts/infra-manager.sh verify

      - name: Deploy State Resources
        working-directory: devops/terraform/00_state
        run: |
          # Clean any existing state
          rm -rf .terraform*

          # Initialize and verify
          terraform init
          echo "🔍 Verifying existing state infrastructure..."
          if terraform plan -target=data.aws_s3_bucket.state_bucket \
             -target=data.aws_dynamodb_table.state_lock -detailed-exitcode; then
            echo "✅ State infrastructure exists"
            terraform output infrastructure_verification
          else
            case $? in
              1) echo "❌ Verification failed"; exit 1;;
              2) echo "Creating state infrastructure...";;
            esac
          fi

      - name: Deploy Network Layer
        working-directory: devops/terraform/01_network
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan

      - name: Import Existing Log Group
        working-directory: devops/terraform/02_eks
        run: |
          if aws logs describe-log-groups --log-group-name-prefix "/aws/eks/vanillatstodo-cluster" | grep -q "logGroupName"; then
            terraform import aws_cloudwatch_log_group.eks "/aws/eks/vanillatstodo-cluster/cluster" || true
          fi

      - name: Deploy EKS Layer
        working-directory: devops/terraform/02_eks
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan
        env:
          TF_VAR_environment: staging

      - name: Deploy Monitoring
        working-directory: ./devops/terraform/03_monitoring
        run: |
          terraform fmt -check -diff
          terraform init \
            -backend-config="bucket=vanillatstodo-terraform-state" \
            -backend-config="key=staging/monitoring.tfstate" \
            -backend-config="region=us-east-2"
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Verify EKS Deployment
        if: success()
        working-directory: ./devops/terraform/02-eks
        run: |
          CLUSTER_STATUS=$(aws eks describe-cluster --name vanillatstodo-cluster --query 'cluster.status' --output text)
          if [ "$CLUSTER_STATUS" != "ACTIVE" ]; then
            echo "Cluster is not active. Status: $CLUSTER_STATUS"
            exit 1
          fi

      - name: Capture Outputs
        if: success()
        working-directory: ./devops/terraform/02_eks
        run: |
          echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV

      - name: Notify on Completion
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const message = `Infrastructure deployment ${context.job.status}
            Environment: ${process.env.TF_WORKSPACE}
            EKS Cluster: ${process.env.EKS_CLUSTER_NAME}
            VPC: ${process.env.VPC_ID}
            Timestamp: ${new Date().toISOString()}`;

            console.log(message);

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

      - name: Deployment Summary
        if: always()
        run: |
          echo "Deployment Status:"
          echo "State Layer: ${{ steps.state.outcome }}"
          echo "Network Layer: ${{ steps.network.outcome }}"
          echo "EKS Layer: ${{ steps.eks.outcome }}"
