name: Deploy Infrastructure

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: staging
      TF_VAR_environment: staging    

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Format Terraform Code
      working-directory: ./terraform
      run: terraform fmt -check      

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Create State Backend
      run: |
        aws s3api head-bucket --bucket vanillatstodo-terraform-state || \
        aws s3api create-bucket \
          --bucket vanillatstodo-terraform-state \
          --region us-east-2 \
          --create-bucket-configuration LocationConstraint=us-east-2

        aws s3api put-bucket-versioning \
          --bucket vanillatstodo-terraform-state \
          --versioning-configuration Status=Enabled

        aws s3api put-bucket-encryption \
          --bucket vanillatstodo-terraform-state \
          --server-side-encryption-configuration '{
            "Rules": [
              {
                "ApplyServerSideEncryptionByDefault": {
                  "SSEAlgorithm": "AES256"
                }
              }
            ]
          }'

        aws dynamodb describe-table --table-name vanillatstodo-terraform-state-lock || \
        aws dynamodb create-table \
          --table-name vanillatstodo-terraform-state-lock \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST

    - name: Check S3 Bucket
      run: |
        aws s3api head-bucket --bucket vanillatstodo-terraform-state || \
        aws s3api create-bucket \
          --bucket vanillatstodo-terraform-state \
          --region us-east-2 \
          --create-bucket-configuration LocationConstraint=us-east-2        

    - name: Initialize Terraform
      working-directory: ./terraform    
      run: |
        terraform init \
          -backend-config="bucket=vanillatstodo-terraform-state" \
          -backend-config="key=staging/terraform.tfstate" \
          -backend-config="region=us-east-2"

    - name: Validate Terraform
      working-directory: ./terraform
      run: terraform validate

    - name: Plan Terraform
      working-directory: ./terraform
      run: terraform plan

    - name: Apply Terraform
      working-directory: ./terraform
      timeout-minutes: 30
      continue-on-error: false
      run: terraform apply -auto-approve

    - name: Capture Terraform Outputs
      working-directory: ./terraform
      run: |
        echo "EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)" >> $GITHUB_ENV
        echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV

    - name: Notify on Completion
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const message = `Infrastructure deployment ${context.job.status}
          Environment: ${process.env.TF_WORKSPACE}
          Timestamp: ${new Date().toISOString()}`;
          
          console.log(message);
          
          // Only try to create comment if running from a PR
          if (context.payload.pull_request) {
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          } 