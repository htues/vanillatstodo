name: Install EBS CSI Add-on

"on":
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (staging/production/experimental)"
        required: true
        type: choice
        options:
        - staging
        - production
        - experimental
        default: "experimental"

permissions:
  id-token: write
  contents: read

env:
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME || 'vanillatstodo-cluster' }}
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
  PROJECT_NAME: ${{ vars.APP_NAME || 'vanillatstodo' }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}

jobs:
  install-ebs-csi:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Prepare kubectl
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
        echo "🔎 AWS identity:" && aws sts get-caller-identity || true
        echo "🔎 Nodes:" && kubectl get nodes -o wide || true
        echo "🔎 kube-system daemonsets:" && kubectl -n kube-system get ds -o wide || true

    - name: Wait for nodes Ready
      run: |
        echo "⏳ Waiting for nodes to become Ready..."
        for i in {1..30}; do
          READY=$(kubectl get nodes --no-headers 2>/dev/null | awk '{print $2}' | grep -c "Ready")
          if [ "$READY" -ge 1 ]; then
            echo "✅ Nodes are Ready ($READY)"; break
          fi
          echo "...still waiting ($i/30)"; sleep 10
        done

    - name: Resolve IRSA role ARN
      id: resolve_irsa
      run: |
        EBS_CSI_ROLE_NAME="${{ env.ENVIRONMENT }}-${{ env.PROJECT_NAME }}-ebs-csi-role"
        EBS_CSI_ROLE_ARN=$(aws iam get-role --role-name "$EBS_CSI_ROLE_NAME" --query 'Role.Arn' --output text 2>/dev/null || echo "")
        if [ -z "$EBS_CSI_ROLE_ARN" ] || [ "$EBS_CSI_ROLE_ARN" = "None" ]; then
          echo "❌ Could not resolve IRSA role ARN for $EBS_CSI_ROLE_NAME"; exit 1
        fi
        echo "role_arn=$EBS_CSI_ROLE_ARN" >> $GITHUB_OUTPUT

    - name: Create/Update EBS CSI Add-on
      run: |
        ROLE_ARN="${{ steps.resolve_irsa.outputs.role_arn }}"
        set +e
        aws eks describe-addon --cluster-name ${{ env.CLUSTER_NAME }} --addon-name aws-ebs-csi-driver --region ${{ env.AWS_REGION }} >/dev/null 2>&1
        EXISTS=$?
        set -e
        if [ $EXISTS -eq 0 ]; then
          echo "🔄 Updating existing EBS CSI add-on..."
          aws eks update-addon --cluster-name ${{ env.CLUSTER_NAME }} --addon-name aws-ebs-csi-driver --resolve-conflicts OVERWRITE --service-account-role-arn "$ROLE_ARN" --region ${{ env.AWS_REGION }} || true
        else
          echo "🆕 Creating EBS CSI add-on..."
          aws eks create-addon --cluster-name ${{ env.CLUSTER_NAME }} --addon-name aws-ebs-csi-driver --resolve-conflicts OVERWRITE --service-account-role-arn "$ROLE_ARN" --region ${{ env.AWS_REGION }} || true
        fi

    - name: Wait for ACTIVE and Diagnose if needed
      run: |
        echo "⏳ Waiting for add-on to be ACTIVE (10m max)..."
        for i in {1..60}; do
          STATUS=$(aws eks describe-addon --cluster-name ${{ env.CLUSTER_NAME }} --addon-name aws-ebs-csi-driver --query 'addon.status' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo UNKNOWN)
          echo "Add-on status: $STATUS"
          if [ "$STATUS" = "ACTIVE" ]; then
            echo "✅ EBS CSI add-on ACTIVE"; exit 0
          fi
          sleep 10
        done
        echo "❌ Add-on not ACTIVE. Diagnostics:"
        aws eks describe-addon --cluster-name ${{ env.CLUSTER_NAME }} --addon-name aws-ebs-csi-driver --query '{status:addon.status,health:addon.health,role:addon.serviceAccountRoleArn}' --output json --region ${{ env.AWS_REGION }} || true
        kubectl -n kube-system get ds,pods -o wide | grep -Ei 'ebs|csi' || true
        kubectl -n kube-system get events --sort-by=.lastTimestamp | tail -n 100 || true
        echo "🔎 Describing ebs-csi-controller deployment:" && kubectl -n kube-system describe deploy ebs-csi-controller || true
        echo "🔎 Logs (ebs-plugin):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c ebs-plugin --tail=200 || true
        echo "🔎 Logs (csi-attacher):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c csi-attacher --tail=200 || true
        echo "🔎 Logs (csi-provisioner):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c csi-provisioner --tail=200 || true
        echo "🔎 Logs (csi-resizer):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c csi-resizer --tail=200 || true
        echo "🔎 Logs (csi-snapshotter):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c csi-snapshotter --tail=200 || true
        echo "🔎 Logs (liveness-probe):" && kubectl -n kube-system logs deploy/ebs-csi-controller -c liveness-probe --tail=200 || true
        exit 1

