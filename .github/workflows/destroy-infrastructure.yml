name: "Destroy Infrastructure"

"on":
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Type 'destroy' to confirm"
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  CLUSTER_NAME: "vanillatstodo-cluster"
  BUCKET_NAME: "vanillatstodo-terraform-state"
  AWS_REGION: "us-east-2"
  TF_VERSION: "1.10.0"
  PROJECT_NAME: "vanillatstodo"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  destroy:
    timeout-minutes: 30
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirmation == 'destroy' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Destroy EKS Resources
        id: eks_cleanup
        run: |
          # Check if cluster exists first
          echo "🔍 Checking if EKS cluster exists..."
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} >/dev/null 2>&1; then
            echo "✅ Found EKS cluster: ${{ env.CLUSTER_NAME }}"

            # Add required EKS permissions
            aws iam attach-role-policy \
              --role-name vanillatstodo-deployer \
              --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy || \
              echo "⚠️ Could not attach EKS policy - continuing anyway"

            echo "🔍 Checking for EKS node groups..."
            NODE_GROUPS=$(aws eks list-nodegroups --cluster-name ${{ env.CLUSTER_NAME }} --query 'nodegroups[*]' --output text || echo "")

            if [ ! -z "$NODE_GROUPS" ]; then
              echo "Found node groups: $NODE_GROUPS"
              for ng in $NODE_GROUPS; do
                echo "🗑️ Deleting node group: $ng"
                aws eks delete-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
                echo "⏳ Waiting for node group deletion..."
                aws eks wait nodegroup-deleted --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
              done
            fi

            echo "🗑️ Deleting EKS cluster..."
            if aws eks delete-cluster --name ${{ env.CLUSTER_NAME }}; then
              echo "EKS_STATUS=✅" >> $GITHUB_ENV
              aws eks wait cluster-deleted --name ${{ env.CLUSTER_NAME }}
            else
              echo "EKS_STATUS=❌" >> $GITHUB_ENV
            fi
          else
            echo "ℹ️ EKS cluster does not exist, skipping..."
            echo "EKS_STATUS=✅" >> $GITHUB_ENV
          fi

      - name: Clean Up CloudWatch Resources
        id: cloudwatch_cleanup
        run: |
          echo "🔍 Finding CloudWatch resources..."

          # Delete CloudWatch Dashboard
          echo "🔍 Finding CloudWatch Dashboards..."
          DASHBOARD_NAME="staging-vanillatstodo-cluster-dashboard"
          aws cloudwatch delete-dashboards \
            --dashboard-names "$DASHBOARD_NAME" || true

          # Delete CloudWatch Alarms
          echo "🔍 Finding CloudWatch Alarms..."
          aws cloudwatch describe-alarms \
            --alarm-name-prefix "staging-vanillatstodo-cluster" \
            --query 'MetricAlarms[*].AlarmName' \
            --output text | while read -r alarm; do
            if [ ! -z "$alarm" ]; then
              echo "🗑️ Deleting alarm: $alarm"
              aws cloudwatch delete-alarms --alarm-names "$alarm"
            fi
          done

          # Delete CloudWatch Log Groups
          echo "🔍 Finding CloudWatch Log Groups..."
          aws logs describe-log-groups \
            --log-group-name-prefix "/aws/eks/vanillatstodo-cluster" \
            --query 'logGroups[*].logGroupName' \
            --output text | while read -r log_group; do
            if [ ! -z "$log_group" ]; then
              echo "🗑️ Deleting log group: $log_group"
              aws logs delete-log-group --log-group-name "$log_group"
            fi
          done

          echo "CLOUDWATCH_STATUS=✅" >> $GITHUB_ENV

      - name: Clean Up Network Resources
        id: network_cleanup
        run: |
          # Find and delete VPC Endpoints first
          echo "🔍 Finding VPC Endpoints..."
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=*vanillatstodo*" --query 'Vpcs[0].VpcId' --output text)

          if [ "$VPC_ID" != "None" ]; then
            # Delete VPC Endpoints
            ENDPOINT_IDS=$(aws ec2 describe-vpc-endpoints \
              --filters "Name=vpc-id,Values=$VPC_ID" \
              --query 'VpcEndpoints[*].VpcEndpointId' \
              --output text)
            
            for endpoint in $ENDPOINT_IDS; do
              echo "🗑️ Deleting VPC Endpoint: $endpoint"
              aws ec2 delete-vpc-endpoints --vpc-endpoint-ids $endpoint
            done
            
            # Delete NAT Gateways
            echo "🔍 Finding NAT Gateways..."
            NAT_IDS=$(aws ec2 describe-nat-gateways \
              --filter "Name=vpc-id,Values=$VPC_ID" \
              --query 'NatGateways[*].NatGatewayId' \
              --output text)
            
            for nat in $NAT_IDS; do
              echo "🗑️ Deleting NAT Gateway: $nat"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat
            done
            
            # Wait for NAT Gateways to be deleted
            echo "⏳ Waiting for NAT Gateways to be deleted..."
            sleep 30
            
            # Release Elastic IPs
            echo "🔍 Finding Elastic IPs..."
            EIP_ALLOCS=$(aws ec2 describe-addresses \
              --filters "Name=tag:Name,Values=*nat-*" \
              --query 'Addresses[*].AllocationId' \
              --output text)
            
            for eip in $EIP_ALLOCS; do
              echo "🗑️ Releasing Elastic IP: $eip"
              aws ec2 release-address --allocation-id $eip
            done
            
            # Delete Flow Logs
            echo "🔍 Finding VPC Flow Logs..."
            FLOW_LOG_IDS=$(aws ec2 describe-flow-logs \
              --filter "Name=resource-id,Values=$VPC_ID" \
              --query 'FlowLogs[*].FlowLogId' \
              --output text)
            
            for flow_log in $FLOW_LOG_IDS; do
              echo "🗑️ Deleting Flow Log: $flow_log"
              aws ec2 delete-flow-logs --flow-log-ids $flow_log
            done

      - name: Clean Up S3 Resources
        id: s3_cleanup
        run: |
          echo "🔍 Checking S3 bucket: ${{ env.BUCKET_NAME }}"
          if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} 2>/dev/null; then
            echo "📦 Found bucket: ${{ env.BUCKET_NAME }}"
            
            # List and delete all versions
            echo "🗑️ Deleting all object versions..."
            aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
            jq -r '.Versions[]? | "\(.Key)\t\(.VersionId)"' | \
            while IFS=$'\t' read -r key version; do
              echo "Deleting key: $key version: $version"
              aws s3api delete-object \
                --bucket ${{ env.BUCKET_NAME }} \
                --key "$key" \
                --version-id "$version"
            done

            # Delete delete markers
            echo "🗑️ Cleaning up delete markers..."
            aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
            jq -r '.DeleteMarkers[]? | "\(.Key)\t\(.VersionId)"' | \
            while IFS=$'\t' read -r key version; do
              echo "Removing delete marker: $key version: $version"
              aws s3api delete-object \
                --bucket ${{ env.BUCKET_NAME }} \
                --key "$key" \
                --version-id "$version"
            done

            # Final verification and bucket deletion
            echo "🔍 Verifying bucket is empty..."
            sleep 5
            
            REMAINING=$(aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
              jq '.Versions + .DeleteMarkers | length')

            if [ "$REMAINING" = "0" ]; then
              echo "🗑️ Deleting empty bucket..."
              if aws s3api delete-bucket --bucket ${{ env.BUCKET_NAME }}; then
                echo "✅ S3 bucket deleted successfully"
                echo "S3_STATUS=✅" >> $GITHUB_ENV
              else
                echo "❌ Failed to delete bucket"
                echo "S3_STATUS=❌" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ Bucket still contains objects"
              echo "S3_STATUS=❌" >> $GITHUB_ENV
            fi
          else
            echo "ℹ️ Bucket not found or already deleted"
            echo "S3_STATUS=✅" >> $GITHUB_ENV
          fi

      - name: Summarize Cleanup Status
        if: always()
        run: |
          echo "### Cleanup Summary 🧹" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| -------- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
          echo "| EKS Cluster | ${EKS_STATUS:-❌} | Version: 1.31 |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudWatch | ${CLOUDWATCH_STATUS:-❌} | Monitoring |" >> $GITHUB_STEP_SUMMARY
          echo "| VPC Resources | ${VPC_STATUS:-❌} | Network Stack |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 State | ${S3_STATUS:-❌} | Terraform State |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform Version: \`${TF_VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Region: \`${AWS_REGION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${PROJECT_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
