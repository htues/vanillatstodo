name: "Destroy Infrastructure"

"on":
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Type 'destroy' to confirm"
        required: true
        type: string

permissions:
  contents: read
  id-token: write

env:
  CLUSTER_NAME: "vanillatstodo-cluster"
  BUCKET_NAME: "vanillatstodo-terraform-state"
  AWS_REGION: "us-east-2"
  TF_VERSION: "1.10.0"
  PROJECT_NAME: "vanillatstodo"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  destroy:
    timeout-minutes: 30
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirmation == 'destroy' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Destroy EKS Resources
        id: eks_cleanup
        run: |
          # Check if cluster exists first
          echo "🔍 Checking if EKS cluster exists..."
          if aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} >/dev/null 2>&1; then
            echo "✅ Found EKS cluster: ${{ env.CLUSTER_NAME }}"

            # Add required EKS permissions
            aws iam attach-role-policy \
              --role-name vanillatstodo-deployer \
              --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy || \
              echo "⚠️ Could not attach EKS policy - continuing anyway"

            echo "🔍 Checking for EKS node groups..."
            NODE_GROUPS=$(aws eks list-nodegroups --cluster-name ${{ env.CLUSTER_NAME }} --query 'nodegroups[*]' --output text || echo "")

            if [ ! -z "$NODE_GROUPS" ]; then
              echo "Found node groups: $NODE_GROUPS"
              for ng in $NODE_GROUPS; do
                echo "🗑️ Deleting node group: $ng"
                aws eks delete-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
                echo "⏳ Waiting for node group deletion..."
                aws eks wait nodegroup-deleted --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $ng
              done
            fi

            echo "🗑️ Deleting EKS cluster..."
            if aws eks delete-cluster --name ${{ env.CLUSTER_NAME }}; then
              echo "EKS_STATUS=✅" >> $GITHUB_ENV
              aws eks wait cluster-deleted --name ${{ env.CLUSTER_NAME }}
            else
              echo "EKS_STATUS=❌" >> $GITHUB_ENV
            fi
          else
            echo "ℹ️ EKS cluster does not exist, skipping..."
            echo "EKS_STATUS=✅" >> $GITHUB_ENV
          fi

      - name: Clean Up Network Resources
        id: network_cleanup
        run: |
          echo "🔍 Finding DHCP Options Sets..."
          DHCP_IDS=$(aws ec2 describe-dhcp-options \
            --filters "Name=owner-id,Values=$(aws sts get-caller-identity --query 'Account' --output text)" \
            --query 'DhcpOptions[*].DhcpOptionsId' --output text)

          for DHCP_ID in $DHCP_IDS; do
            echo "Checking DHCP Options Set: $DHCP_ID"
            
            # Check if it's associated with any VPCs
            VPC_ASSOCIATIONS=$(aws ec2 describe-vpcs \
              --filters "Name=dhcp-options-id,Values=$DHCP_ID" \
              --query 'Vpcs[*].VpcId' --output text)
            
            if [ -n "$VPC_ASSOCIATIONS" ]; then
              echo "⚠️ DHCP Options Set is associated with VPCs: $VPC_ASSOCIATIONS"
              for vpc in $VPC_ASSOCIATIONS; do
                echo "🔄 Associating VPC with default DHCP options..."
                aws ec2 associate-dhcp-options --vpc-id $vpc --dhcp-options-id default
              done
            fi
            
            # Try to delete non-default DHCP options sets
            if aws ec2 describe-dhcp-options \
              --dhcp-options-ids $DHCP_ID \
              --query 'DhcpOptions[0].Tags[?Key==`Name`].Value' \
              --output text | grep -q "vanillatstodo"; then
              echo "🗑️ Deleting custom DHCP Options Set..."
              aws ec2 delete-dhcp-options --dhcp-options-id $DHCP_ID || true
            fi
          done

          echo "🔍 Finding VPC resources..."
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=*vanillatstodo*" --query 'Vpcs[0].VpcId' --output text)

          if [ "$VPC_ID" != "None" ]; then
            echo "Found VPC: $VPC_ID"
            
            # Add Internet Gateway cleanup first
            echo "🔍 Finding Internet Gateway..."
            IGW_ID=$(aws ec2 describe-internet-gateways \
              --filters "Name=attachment.vpc-id,Values=$VPC_ID" \
              --query 'InternetGateways[0].InternetGatewayId' \
              --output text)

            if [ "$IGW_ID" != "None" ]; then
              echo "🗑️ Detaching Internet Gateway: $IGW_ID"
              aws ec2 detach-internet-gateway \
                --internet-gateway-id $IGW_ID \
                --vpc-id $VPC_ID

              echo "🗑️ Deleting Internet Gateway..."
              aws ec2 delete-internet-gateway --internet-gateway-id $IGW_ID
            fi            

            # List all dependencies for debugging
            echo "📋 Listing VPC Dependencies..."
            aws ec2 describe-vpc-attribute --vpc-id $VPC_ID --attribute enableDnsSupport
            aws ec2 describe-vpc-peering-connections --filters "Name=requester-vpc-info.vpc-id,Values=$VPC_ID"
            aws ec2 describe-vpc-endpoints --filters "Name=vpc-id,Values=$VPC_ID"

            # Force detach and delete ENIs
            echo "🔍 Finding Network Interfaces..."
            ENI_IDS=$(aws ec2 describe-network-interfaces --filters "Name=vpc-id,Values=$VPC_ID" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
            for eni in $ENI_IDS; do
              echo "Processing ENI: $eni"
              ATTACHMENT_ID=$(aws ec2 describe-network-interfaces --network-interface-ids $eni --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text)
              if [ "$ATTACHMENT_ID" != "None" ]; then
                echo "🔄 Force detaching ENI: $eni"
                aws ec2 detach-network-interface --attachment-id $ATTACHMENT_ID --force
                sleep 15  # Wait for detachment
              fi
              echo "🗑️ Deleting ENI: $eni"
              aws ec2 delete-network-interface --network-interface-id $eni || true
            done

            # Delete Security Group Rules First
            echo "🔍 Finding Security Groups..."
            SG_IDS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text)
            for sg in $SG_IDS; do
              echo "🗑️ Removing inbound rules from SG: $sg"
              aws ec2 revoke-security-group-ingress --group-id $sg --protocol all --source-group $sg --port -1 || true
              echo "🗑️ Removing outbound rules from SG: $sg"
              aws ec2 revoke-security-group-egress --group-id $sg --protocol all --port -1 --cidr 0.0.0.0/0 || true
              echo "🗑️ Deleting Security Group: $sg"
              aws ec2 delete-security-group --group-id $sg || true
            done

            # Delete Route Tables (except main)
            echo "🔍 Finding Route Tables..."
            RT_IDS=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text)
            for rt in $RT_IDS; do
              # Delete routes first
              echo "🗑️ Deleting routes from RT: $rt"
              ROUTES=$(aws ec2 describe-route-tables --route-table-id $rt --query 'RouteTables[0].Routes[?GatewayId!=`local`].DestinationCidrBlock' --output text)
              for route in $ROUTES; do
                aws ec2 delete-route --route-table-id $rt --destination-cidr-block $route || true
              done
              
              # Then disassociate
              ASSOC_IDS=$(aws ec2 describe-route-tables --route-table-id $rt --query 'RouteTables[0].Associations[*].RouteTableAssociationId' --output text)
              for assoc in $ASSOC_IDS; do
                echo "🔄 Disassociating route table: $assoc"
                aws ec2 disassociate-route-table --association-id $assoc || true
              done
              
              echo "🗑️ Deleting Route Table: $rt"
              aws ec2 delete-route-table --route-table-id $rt || true
            done

            # Delete Subnets
            echo "🔍 Finding Subnets..."
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text)
            for subnet in $SUBNET_IDS; do
              echo "🗑️ Deleting subnet: $subnet"
              aws ec2 delete-subnet --subnet-id $subnet || true
            done

            # Final VPC deletion attempt
            echo "🗑️ Attempting VPC deletion..."
            sleep 30  # Wait for all deletions to complete
            aws ec2 delete-vpc --vpc-id $VPC_ID
          fi
          if [ $? -eq 0 ]; then
            echo "VPC_STATUS=✅" >> $GITHUB_ENV
          else
            echo "VPC_STATUS=❌" >> $GITHUB_ENV
          fi

      - name: Clean Up S3 Resources
        id: s3_cleanup
        run: |
          echo "🔍 Checking S3 bucket: ${{ env.BUCKET_NAME }}"
          if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} 2>/dev/null; then
            echo "📦 Found bucket: ${{ env.BUCKET_NAME }}"
            
            # List and delete all versions
            echo "🗑️ Deleting all object versions..."
            aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
            jq -r '.Versions[]? | "\(.Key)\t\(.VersionId)"' | \
            while IFS=$'\t' read -r key version; do
              echo "Deleting key: $key version: $version"
              aws s3api delete-object \
                --bucket ${{ env.BUCKET_NAME }} \
                --key "$key" \
                --version-id "$version"
            done

            # Delete delete markers
            echo "🗑️ Cleaning up delete markers..."
            aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
            jq -r '.DeleteMarkers[]? | "\(.Key)\t\(.VersionId)"' | \
            while IFS=$'\t' read -r key version; do
              echo "Removing delete marker: $key version: $version"
              aws s3api delete-object \
                --bucket ${{ env.BUCKET_NAME }} \
                --key "$key" \
                --version-id "$version"
            done

            # Final verification and bucket deletion
            echo "🔍 Verifying bucket is empty..."
            sleep 5
            
            REMAINING=$(aws s3api list-object-versions \
              --bucket ${{ env.BUCKET_NAME }} \
              --output json | \
              jq '.Versions + .DeleteMarkers | length')

            if [ "$REMAINING" = "0" ]; then
              echo "🗑️ Deleting empty bucket..."
              if aws s3api delete-bucket --bucket ${{ env.BUCKET_NAME }}; then
                echo "✅ S3 bucket deleted successfully"
                echo "S3_STATUS=✅" >> $GITHUB_ENV
              else
                echo "❌ Failed to delete bucket"
                echo "S3_STATUS=❌" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ Bucket still contains objects"
              echo "S3_STATUS=❌" >> $GITHUB_ENV
            fi
          else
            echo "ℹ️ Bucket not found or already deleted"
            echo "S3_STATUS=✅" >> $GITHUB_ENV
          fi

      - name: Summarize Cleanup Status
        if: always()
        run: |
          echo "### Cleanup Summary 🧹" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| -------- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
          echo "| EKS Cluster | ${EKS_STATUS:-❌} | Version: 1.31 |" >> $GITHUB_STEP_SUMMARY
          echo "| VPC Resources | ${VPC_STATUS:-❌} | Network Stack |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 State | ${S3_STATUS:-❌} | Terraform State |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Terraform Version: \`${TF_VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Region: \`${AWS_REGION}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${PROJECT_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
