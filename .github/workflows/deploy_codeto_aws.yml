name: Deploy CodeBase to AWS

on:
  # Remove automatic triggers - Manual only
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "experimental"
        type: choice
        options:
          - staging
          - production
          - experimental

permissions:
  id-token: write
  contents: read
  deployments: write
  packages: read

env:
  CLUSTER_NAME: ${{ github.event.client_payload.cluster_name || 'vanillatstodo-cluster' }}
  AWS_REGION: "us-east-2"
  DOCKER_IMAGE: "hftamayo/vanillatstodo:0.0.1"
  ENVIRONMENT: ${{ github.event.client_payload.environment || github.event.inputs.environment || 'experimental' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run on manual dispatch
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.client_payload.environment || github.event.inputs.environment || 'experimental' }}
      url: ${{ env.SERVICE_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load Environment Variables
        run: |
          cat .github/variables/environment.env >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Verify EKS Cluster
        run: |
          echo "🔍 Verifying EKS cluster..."
          if ! aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} >/dev/null 2>&1; then
            echo "❌ EKS cluster not found!"
            exit 1
          fi
          echo "✅ EKS cluster verified"

          # Store cluster endpoint for later use
          if [ -n "${{ github.event.client_payload.cluster_endpoint }}" ]; then
            CLUSTER_ENDPOINT="${{ github.event.client_payload.cluster_endpoint }}"
          else
            CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --query "cluster.endpoint" --output text)
          fi
          echo "CLUSTER_ENDPOINT=${CLUSTER_ENDPOINT}" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }}

      - name: Verify Cluster Health
        run: |
          echo "🔍 Checking cluster health..."
          echo "📊 Cluster Info:"
          kubectl cluster-info
          echo ""
          echo "📊 Node Status:"
          kubectl get nodes -o wide || echo "❌ No nodes found!"
          echo ""
          echo "📊 Node Groups (AWS):"
          aws eks describe-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name workers || echo "❌ No nodegroup found!"
          echo ""

      - name: Save Current Deployment
        run: |
          if kubectl get deployment vanillatstodo &>/dev/null; then
            echo "📦 Saving current deployment state..."
            kubectl get deployment vanillatstodo -o yaml > previous_deployment.yaml
          else
            echo "ℹ️ No existing deployment found"
          fi

      - name: Create Docker Hub Secret
        run: |
          echo "🔐 Setting up Docker credentials..."
          kubectl create secret docker-registry regcred \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_HUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_HUB_PAT }} \
            --docker-email=${{ secrets.DOCKER_HUB_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PAT }}

      - name: Verify Docker Image
        run: |
          echo "🔍 Verifying Docker image..."
          if ! docker pull ${{ env.DOCKER_IMAGE }}; then
            echo "❌ Docker image not found!"
            exit 1
          fi
          echo "✅ Docker image verified"

      - name: Deploy to EKS
        run: |
          echo "🚀 Deploying application..."
          kubectl apply -f devops/k8s/vanillatstodo_deployment.yml
          kubectl apply -f devops/k8s/vanillatstodo_service.yml

      - name: Wait for Deployment
        run: |
          echo "⏳ Waiting for deployment rollout..."
          if ! kubectl rollout status deployment/vanillatstodo --timeout=10m; then
            echo "❌ Deployment failed!"
            echo ""
            echo "🔍 Deployment Details:"
            kubectl describe deployment/vanillatstodo
            echo ""
            echo "🔍 Pod Status:"
            kubectl get pods -l app=vanillatstodo -o wide
            echo ""
            echo "🔍 Pod Events:"
            kubectl describe pods -l app=vanillatstodo
            echo ""
            echo "🔍 Container Logs:"
            kubectl logs -l app=vanillatstodo --tail=100 --all-containers=true
            echo ""
            echo "🔍 Node Resources:"
            kubectl top nodes || echo "Metrics not available"
            echo ""
            echo "🔍 Cluster Events:"
            kubectl get events --sort-by=.metadata.creationTimestamp --tail=20
            exit 1
          fi

      - name: Get Service Details
        id: service
        run: |
          echo "⏳ Waiting for LoadBalancer..."
          for i in {1..20}; do
            EXTERNAL_IP=$(kubectl get svc vanillatstodo -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "SERVICE_URL=${EXTERNAL_IP}" >> $GITHUB_ENV
              echo "✅ Service URL: ${EXTERNAL_IP}"
              break
            fi
            echo "⏳ Waiting for external IP... (${i}/20)"
            sleep 15
          done

      - name: Verify Application Health
        id: health_check
        run: |
          echo "⏳ Checking application health..."
          for i in {1..10}; do
            if curl -sf "http://${SERVICE_URL}/"; then
              echo "✅ Application is healthy"
              echo "health_status=healthy" >> $GITHUB_OUTPUT
              break
            fi
            echo "⏳ Waiting for application to be ready... (${i}/10)"
            sleep 30
          done

      - name: Rollback on Failure
        if: failure() && hashFiles('previous_deployment.yaml') != ''
        run: |
          echo "🔄 Rolling back deployment..."
          kubectl apply -f previous_deployment.yaml
          kubectl rollout status deployment/vanillatstodo --timeout=5m

      - name: Deployment Summary
        if: always()
        run: |
          echo "### Deployment Status 🚀" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "| --------- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
          echo "| Cluster | ${{ job.status }} | ${{ env.CLUSTER_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ env.ENVIRONMENT }} | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Service URL | ${{ env.SERVICE_URL || 'N/A' }} | LoadBalancer |" >> $GITHUB_STEP_SUMMARY
          echo "| Image | ✅ | ${{ env.DOCKER_IMAGE }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cluster Endpoint | ${{ env.CLUSTER_ENDPOINT }} | API Server |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ steps.health_check.outputs.health_status || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rollback Status | ${{ job.status == 'failure' && hashFiles('previous_deployment.yaml') != '' && 'Applied' || 'Not Required' }} |" >> $GITHUB_STEP_SUMMARY

    # - name: Create Route 53 Record
    #   run: |
    #     aws route53 change-resource-record-sets --hosted-zone-id <YOUR_HOSTED_ZONE_ID> --change-batch '{
    #       "Changes": [{
    #         "Action": "UPSERT",
    #         "ResourceRecordSet": {
    #           "Name": "www.vanillatstodo.hftamayo.com",
    #           "Type": "A",
    #           "AliasTarget": {
    #             "HostedZoneId": "Z35SXDOTRQ7X7K",
    #             "DNSName": "$EXTERNAL_IP",
    #             "EvaluateTargetHealth": false
    #           }
    #         }
    #       }]
    #     }'
