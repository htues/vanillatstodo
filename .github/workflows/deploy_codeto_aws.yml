name: Deploy CodeBase to AWS
# Summary: Helm-only deployment. Kustomize removed. Uses per-environment values files at
# devops/helm-chart-app/values-${ENVIRONMENT}.yaml and sets image/tag via --set.

on:
  # Remove automatic triggers - Manual only
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "experimental"
        type: choice
        options:
        - staging
        - production
        - experimental

permissions:
  id-token: write
  contents: read
  deployments: write
  packages: read

env:
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME || 'vanillatstodo-cluster' }}
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
  APP_NAME: ${{ vars.APP_NAME || 'vanillatstodo' }}
  ENVIRONMENT: ${{ github.event.client_payload.environment || github.event.inputs.environment || 'experimental' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run on manual dispatch
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.client_payload.environment || github.event.inputs.environment || 'experimental' }}
      url: ${{ env.SERVICE_URL }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set Dynamic Variables
      run: |
        # Use stable tag for testing (change this for production)
        DOCKER_TAG="${{ vars.DOCKER_TAG || '0.0.1' }}"
        echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_ENV
        echo "FULL_DOCKER_IMAGE=${{ vars.DOCKER_REPOSITORY || 'hftamayo/vanillatstodo' }}:${DOCKER_TAG}" >> $GITHUB_ENV

    - name: Get IAM Role ARN
      id: iam_role_arn
      run: |
        # Try to get role ARN from IAM Terraform state
        cd devops/terraform/04_iam
        terraform init -reconfigure \
          -backend-config="bucket=${{ vars.BUCKET_NAME || 'vanillatstodo-terraform-state' }}" \
          -backend-config="key=${{ env.ENVIRONMENT }}/iam/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="encrypt=true" >/dev/null 2>&1 || true
        
        # Check if IAM resources exist and get role ARN
        if terraform output -raw github_actions_role_arn 2>/dev/null; then
          ROLE_ARN=$(terraform output -raw github_actions_role_arn)
          echo "github_actions_role_arn=${ROLE_ARN}" >> $GITHUB_OUTPUT
          echo "‚úÖ Found IAM role ARN: ${ROLE_ARN}"
        else
          # Fallback to secret if IAM state not available
          ROLE_ARN="${{ secrets.AWS_ROLE_ARN }}"
          echo "github_actions_role_arn=${ROLE_ARN}" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Using fallback role ARN from secrets"
        fi

    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.iam_role_arn.outputs.github_actions_role_arn }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: "3.12.3"

    # Kustomize no longer used (Helm-only)

    - name: Verify EKS Cluster
      run: |
        echo "üîç Verifying EKS cluster..."
        if ! aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} >/dev/null 2>&1; then
          echo "‚ùå EKS cluster not found!"
          exit 1
        fi
        echo "‚úÖ EKS cluster verified"

        # Store cluster endpoint for later use
        if [ -n "${{ github.event.client_payload.cluster_endpoint }}" ]; then
          CLUSTER_ENDPOINT="${{ github.event.client_payload.cluster_endpoint }}"
        else
          CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --query "cluster.endpoint" --output text)
        fi
        echo "CLUSTER_ENDPOINT=${CLUSTER_ENDPOINT}" >> $GITHUB_ENV

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig \
          --name ${{ env.CLUSTER_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --role-arn ${{ steps.iam_role_arn.outputs.github_actions_role_arn }}

    - name: Verify Cluster Health
      run: |
        echo "üîç Checking cluster health..."
        echo "üìä Cluster Info:"
        kubectl cluster-info
        echo ""
        echo "üìä Node Status:"
        kubectl get nodes -o wide || echo "‚ùå No nodes found!"
        echo ""
        echo "üìä Node Groups (AWS):"
        # List all nodegroups instead of hardcoding 'workers'
        NODEGROUPS=$(aws eks list-nodegroups --cluster-name ${{ env.CLUSTER_NAME }} --query "nodegroups[0]" --output text 2>/dev/null || echo "")
        if [ -n "$NODEGROUPS" ] && [ "$NODEGROUPS" != "None" ]; then
          aws eks describe-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $NODEGROUPS || echo "‚ùå Nodegroup details unavailable!"
        else
          echo "‚ùå No nodegroups found!"
        fi
        echo ""

    - name: Save Current Deployment
      run: |
        if helm status ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} &>/dev/null; then
          echo "üì¶ Saving current Helm release state..."
          helm get values ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} > previous_values.yaml
          echo "PREVIOUS_RELEASE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ÑπÔ∏è No existing Helm release found"
          echo "PREVIOUS_RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Create Docker Hub Secret
      run: |
        echo "üîê Setting up Docker credentials..."
        kubectl create secret docker-registry regcred \
          --docker-server=https://index.docker.io/v1/ \
          --docker-username=${{ secrets.DOCKER_HUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKER_HUB_PAT }} \
          --docker-email=${{ secrets.DOCKER_HUB_EMAIL }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PAT }}

    - name: Verify Docker Image
      run: |
        echo "üîç Verifying Docker image..."
        echo "Docker image: ${{ env.FULL_DOCKER_IMAGE }}"
        if ! docker pull ${{ env.FULL_DOCKER_IMAGE }}; then
          echo "‚ùå Docker image not found!"
          exit 1
        fi
        echo "‚úÖ Docker image verified"

    - name: Prepare Helm Values
      run: |
        echo "üì¶ Selecting Helm values file..."
        VALUES_FILE="devops/helm-chart-app/values-${{ env.ENVIRONMENT }}.yaml"
        if [ ! -f "$VALUES_FILE" ]; then
          echo "‚ùå Values file not found: $VALUES_FILE"
          exit 1
        fi
        echo "VALUES_FILE=$VALUES_FILE" >> $GITHUB_ENV

    - name: Deploy to EKS with Helm
      run: |
        echo "üöÄ Deploying application with Helm..."
        echo "Environment: ${{ env.ENVIRONMENT }}"
        echo "Release: ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}"
        echo "Values: ${{ env.VALUES_FILE }}"
        echo "Image: ${{ env.FULL_DOCKER_IMAGE }}"

        cd devops/helm-chart-app
        helm dependency update || true
        helm upgrade --install ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} . \
          -f "values-${{ env.ENVIRONMENT }}.yaml" \
          --set image.repository=${{ vars.DOCKER_REPOSITORY || 'hftamayo/vanillatstodo' }} \
          --set image.tag=${{ env.DOCKER_TAG }} \
          --set app.name=${{ env.APP_NAME }} \
          --set app.environment=${{ env.ENVIRONMENT }} \
          --wait --timeout=600s
        cd ../../
        echo "‚úÖ Helm deployment applied successfully"

    - name: Wait for Deployment
      run: |
        echo "‚è≥ Waiting for deployment to be ready..."

        # Check deployment status
        # Try rollout by label selector in case resource name is templated
        if ! kubectl rollout status deployment -l app=${{ env.APP_NAME }} --timeout=10m; then
          echo "‚ùå Deployment failed!"
          echo ""
          echo "üîç Helm Release Status:"
          helm status ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}
          echo ""
          echo "üîç Deployment Details:"
          kubectl get deploy -l app=${{ env.APP_NAME }} -o wide || true
          kubectl describe deploy -l app=${{ env.APP_NAME }} || true
          echo ""
          echo "üîç Pod Status:"
          kubectl get pods -l app=${{ env.APP_NAME }} -o wide || true
          echo ""
          echo "üîç Pod Events:"
          kubectl describe pods -l app=${{ env.APP_NAME }} || true
          echo ""
          echo "üîç Container Logs:"
          kubectl logs -l app=${{ env.APP_NAME }} --tail=100 --all-containers=true || true
          echo ""
          echo "üîç Helm Release History:"
          helm history ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }}
          exit 1
        fi

    - name: Get Service Details
      id: service
      run: |
        echo "‚è≥ Waiting for LoadBalancer..."
        for i in {1..20}; do
          # Try to find the service by label
          SVC_NAME=$(kubectl get svc -l app=${{ env.APP_NAME }} -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          if [ -n "$SVC_NAME" ]; then
            EXTERNAL_IP=$(kubectl get svc "$SVC_NAME" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          else
            EXTERNAL_IP=""
          fi
          if [ -n "$EXTERNAL_IP" ]; then
            echo "SERVICE_URL=${EXTERNAL_IP}" >> $GITHUB_ENV
            echo "‚úÖ Service URL: ${EXTERNAL_IP}"
            break
          fi
          echo "‚è≥ Waiting for external IP... (${i}/20)"
          sleep 15
        done

    - name: Verify Application Health
      id: health_check
      run: |
        echo "‚è≥ Checking application health..."
        for i in {1..10}; do
          if curl -sf "http://${SERVICE_URL}/"; then
            echo "‚úÖ Application is healthy"
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            break
          fi
          echo "‚è≥ Waiting for application to be ready... (${i}/10)"
          sleep 30
        done

    - name: Rollback on Failure
      if: failure() && env.PREVIOUS_RELEASE_EXISTS == 'true'
      run: |
        echo "üîÑ Rolling back Helm release..."
        helm rollback ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} 0
        kubectl rollout status deployment/${{ env.APP_NAME }} --timeout=5m

    - name: Deployment Summary
      if: always()
      run: |
        echo "### üöÄ Helm Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "| --------- | ------ | ------- |" >> $GITHUB_STEP_SUMMARY
        echo "| Cluster | ${{ job.status }} | ${{ env.CLUSTER_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ env.ENVIRONMENT }} | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Release Name | ${{ env.APP_NAME }}-${{ env.ENVIRONMENT }} | Helm Release |" >> $GITHUB_STEP_SUMMARY
        echo "| Values File | values-${{ env.ENVIRONMENT }}.yaml | Configuration |" >> $GITHUB_STEP_SUMMARY
        echo "| Service URL | ${{ env.SERVICE_URL || 'N/A' }} | LoadBalancer |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | ‚úÖ | ${{ env.FULL_DOCKER_IMAGE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment Method | Helm | Security Enhanced |" >> $GITHUB_STEP_SUMMARY
        echo "| Health Check | ${{ steps.health_check.outputs.health_status || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Rollback Status | ${{ job.status == 'failure' && env.PREVIOUS_RELEASE_EXISTS == 'true' && 'Applied' || 'Not Required' }} |" >> $GITHUB_STEP_SUMMARY
    # - name: Create Route 53 Record
    #   run: |
    #     aws route53 change-resource-record-sets --hosted-zone-id <YOUR_HOSTED_ZONE_ID> --change-batch '{
    #       "Changes": [{
    #         "Action": "UPSERT",
    #         "ResourceRecordSet": {
    #           "Name": "www.vanillatstodo.hftamayo.com",
    #           "Type": "A",
    #           "AliasTarget": {
    #             "HostedZoneId": "Z35SXDOTRQ7X7K",
    #             "DNSName": "$EXTERNAL_IP",
    #             "EvaluateTargetHealth": false
    #           }
    #         }
    #       }]
    #     }'
