apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app: {{ .Values.app.name }}
    app.kubernetes.io/name: {{ .Values.app.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: "{{ .Values.app.version }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    environment: {{ .Values.app.environment }}
    version: "{{ .Values.app.version }}"
spec:
  replicas: {{ .Values.deployment.replicas }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.deployment.strategy.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
        version: "{{ .Values.app.version }}"
      annotations:
        prometheus.io/scrape: "{{ .Values.monitoring.prometheus.scrape }}"
        prometheus.io/port: "{{ .Values.monitoring.prometheus.port }}"
    spec:
      containers:
        - name: {{ .Values.app.name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.targetPort }}
              name: http
          resources:
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.resources.limits.cpu }}"
              memory: "{{ .Values.resources.limits.memory }}"
          {{- if .Values.healthChecks.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthChecks.readinessProbe.httpGet.path }}
              port: {{ .Values.healthChecks.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.healthChecks.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.readinessProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthChecks.livenessProbe.httpGet.path }}
              port: {{ .Values.healthChecks.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.healthChecks.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.livenessProbe.periodSeconds }}
          {{- end }}
          env:
            - name: NODE_ENV
              value: "{{ .Values.app.environment }}"
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.security.enabled }}
      securityContext:
        runAsNonRoot: {{ .Values.security.runAsNonRoot }}
        runAsUser: {{ .Values.security.runAsUser }}
      {{- end }}
